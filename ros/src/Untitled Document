
if  (std::cin.get() == '\n') 
	{
		int dist	 = setup_(2);
		int angle_XZ = setup_(0);
		int angle_YZ = setup_(1);

		std::string filename_append =getFilePathFromParameter(dist,angle_XZ,angle_YZ);
		std::cout << filename_append << std::endl;

		std::string myString = "";
		std::string model_type = "";
		std::string save_bool = "";

		while(true)
		{
		
			
			std::cout << "Save Point Cloud" << std::endl;
			
			std::cout << "Enter type of handle and confirm with enter:" << std::endl;

			std::getline(std::cin, myString);

			if  (myString.length() != 0)
			{
				model_type = myString;
				break;
			}
		} 

		std::string name_pcd  = "door_handle_type_" + model_type + filename_append;
		std::string path_type = PATH_TO_DIR + model_type + "/" + name_pcd ;

		while(true)
		{
			std::cout << "Save to file? [y/n]" << std::endl;
			std::getline(std::cin, myString);

			if  (myString.length() != 0)
			{
				save_bool = myString;

				if (save_bool.compare("y") == 0)
				{
					// check if directory exists,

						boost::filesystem::path p(PATH_TO_DIR + model_type);  // avoid repeated path construction below

						if (!exists(p))    // does path p actually exist?
						{
							ROS_WARN("Creating Directory...");
							boost::filesystem::create_directory(p);	
							// store png 
						}
							ROS_WARN("Writing point cloud to pcd file...");
							//std::cout<<path_type<<std::endl;
							std::cout<<point_cloud->points.size()<<std::endl;
							pcl::io::savePCDFileASCII (path_type,*point_cloud);

					break;
				}

				else
				{
					ROS_WARN("Cancelling selection...");
					break;
				}
			}
		} 
		// vreate saving path -> based on handle type name 
		//save selected patch 
		// save reduced object with 
	}

